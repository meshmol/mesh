;;Babbage graphics demo
;;kenichi sasagawa 2009/11/23

(import (normal kids)
        (normal system)
        (scheme complex))

(define (demo)
  (c-curve)(sleep 1000)
  (drg-curve)(sleep 1000)
  (flower)(sleep 1000)
  (spiral-demo)(sleep 1000)
  (mandelbrot))

(define (square-box)
  (forward 100)
  (right 90)
  (forward 100)
  (right 90)
  (forward 100)
  (right 90)
  (forward 100)
  (right 90))

(define (c n leng)
  (if (zero? n)
      (forward leng)
      (begin (c (-1+ n) leng)
             (right 90)
             (c (-1+ n) leng)
             (left 90))))

(define (c-curve)
  (cls)
  (home)
  (pen-color 'blue)
  (set-zoom 6)
  (c 8 1))

(define (rdg n)
  (if (zero? n)
      #t
      (begin (ldg (-1+ n))
             (forward 1)
             (right 90)
             (rdg (-1+ n)))))

(define (ldg n)
  (if (zero? n)
      #t
      (begin (ldg (-1+ n))
             (forward 1)
             (left 90)
             (rdg (-1+ n)))))

(define (drg-curve)
  (cls)
  (home)
  (pen-color 'blue)
  (set-zoom 3)
  (rdg 10))

(define (rsaiki n)
  (if (zero? n)
      #t
      (begin (pen-color 'blue)
             (right 90)
             (lsaiki (-1+ n))
             (forward 2)
             (left 90)
             (rsaiki (-1+ n))
             (forward 2)
             (rsaiki (-1+ n))
             (left 90)
             (forward 2)
             (lsaiki (-1+ n))
             (right 90))))

(define (lsaiki n)
  (if (zero? n)
      #t
      (begin (pen-color 'maroon)
             (left 90)
             (rsaiki (-1+ n))
             (forward 2)
             (right 90)
             (lsaiki (-1+ n))
             (forward 2)
             (lsaiki (-1+ n))
             (right 90)
             (forward 2)
             (rsaiki (-1+ n))
             (left 90))))


(define (pset-complex z color)
  (let ((x (real-part z))
        (y (imag-part z)))
    (pen-color color)
    (pset x y)))

(define (mandelbrot? c)
  (define (iter n z)
    (cond ((sub? z) #f)
          ((= n 50) #t)
          (else (iter (1+ n) (+ (* z z) c)))))
  (define (sub? z)
    (> (+ (expt (real-part z) 2)
          (expt (imag-part z) 2))
       4))
  (iter 0 0+0i))

(define (mandelbrot)
  (cls)
  (set-zoom 100)
  (pen-color 'blue)
  (hide-turtle)
  (fore)
  (do ((x -2 (+ x 0.01)))
      ((> x 2))
      (do ((y -2 (+ y 0.01)))
          ((> y 2))
          (if (mandelbrot? (make-rectangular x y))
              (pset x y)
              #t))))


(define (ta l)
  (if (< l 5)
      #t
      (begin (forward l)
             (right 120)
             (ta (/ l 2))
             (forward l)
             (right 120)
             (ta (/ l 2))
             (forward l)
             (right 120)
             (ta (/ l 2)))))

(define (draw-sin)
  (do ((x -2 (+ x 0.01)))
      ((> x 2))
      (pset x (sin x))))

(define (draw-cos)
  (do ((x -2 (+ x 0.01)))
      ((> x 2))
      (pset x (cos x))))

(define (plot f m n)
  (let* ((scale (abs (max m n)))
         (zoom (truncate (/ 200 scale)))
         (step (/ scale 200)))
    (set-zoom zoom)
    (pen-up)
    (move m (f m))
    (pen-down)
    (do ((x m (+ x 0.01)))
        ((> x n))
        (move x (f x)))))

(define (draw-i f r m n)
  (do ((i m (+ i 0.01)))
      ((> i n))
      (pset-complex (f (make-rectangular r i)))))

(define (draw-r f i m n)
  (do ((r m (+ r 0.01)))
      ((> r n))
      (pset-complex (f (make-rectangular r i)))))

(define (map-z-w-circle r f x0 y0)
  (do ((sita 0 (+ sita 0.01)))
      ((> sita (* 2 pi)))
      (let* ((real (+ (* r (cos sita)) x0))
             (imag (+ (* r (sin sita)) y0))
             (z (make-rectangular real imag)))
        (pset real imag 'z)
        (pset (real-part (f z)) (imag-part (f z)) 'w))))

(define (pset-complex z)
  (pset (real-part z) (imag-part z)))


(define (spiral l a)
  (if (> l 200)
      #t
      (begin (forward l)
             (right a)
             (spiral (+ l 2) a))))

(define (spiral-demo)
  (cls)
  (home)
  (set-zoom 1)
  (pen-color 'blue)
  (spiral 50 92))

(define (repeat n f)
  (if (zero? n)
      #t
      (begin (f)
             (repeat (1- n) f))))

(define (flower)
  (cls)
  (home)
  (pen-color 'blue)
  (set-zoom 1)
  (repeat 36 (lambda () (right 10) (square-box))))

(define (circles)
  (define (iter n)
    (if (= n 10)
        #t
        (begin (circle 0 0 n)
               (iter (- n 10)))))
  (iter 200))


(define (log-complex z n)
  (if (= n 0)
      #t
      (begin (move (real-part z) (imag-part z))
             (log-complex (log z) (1- n)))))

(define (koch n)
  (koch-recur n)
  (rt 120)
  (fd 3)
  (koch-recur n)
  (rt 120)
  (fd 3)
  (koch-recur n)
  )

(define (koch-recur n)
  (if (= n 0)
      #t
      (begin (koch-recur (1- n))
             (lt 60) (fd 3)
             (koch-recur (1- n))
             (rt 120) (fd 3)
             (koch-recur (1- n))
             (lt 60) (fd 3)
             (koch-recur (1- n)))))


(define (-1+ n)
  (- n 1))
 
(define (1- n)
  (- n 1))

(define (1+ n)
  (+ n 1))
